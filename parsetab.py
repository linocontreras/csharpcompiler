
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BOOL CLASS COMMA CONST DOT DOUBLE DOUBLE_LITERAL ELSE FALSE IDENTIFIER IF INT INTEGER_LITERAL LBRACKET LPAREN PRIVATE PUBLIC RBRACKET RPAREN SEMICOLON STRING STRING_LITERAL TRUE VOID WHILEstart : class_listclass_list : class_list class\n                  | emptyclass : access CLASS IDENTIFIER LBRACKET class_body RBRACKETclass_body : class_body method\n                  | class_body class_variable\n                  | class_body constant\n                  | emptyclass_variable : access type IDENTIFIER SEMICOLON\n                      | access type IDENTIFIER ASSIGNMENT expression SEMICOLONmethod : access type IDENTIFIER LPAREN arguments RPAREN blockaccess : PUBLIC\n              | PRIVATE\n              | emptystatement_list : statement_list statement\n                      | emptystatement : var_declaration\n                 | asignment\n                 | constant\n                 | block_statement\n                 | call SEMICOLONconstant : CONST var_declarationvar_declaration : type IDENTIFIER SEMICOLON\n                       | type IDENTIFIER ASSIGNMENT expression SEMICOLONasignment : fqn ASSIGNMENT expression SEMICOLONexpression : int_expression\n                  | double_expression\n                  | string_expression\n                  | bool_expression\n                  | callblock_statement : if\n                       | whileif : IF LPAREN expression RPAREN block_or_statement elseelse : ELSE block_or_statement\n            | emptywhile : WHILE LPAREN expression RPAREN block_or_statementblock_or_statement : statement\n                          | blockblock : LBRACKET statement_list RBRACKETint_expression : INTEGER_LITERALfqn : IDENTIFIER\n           | fqn DOT IDENTIFIERtype_name : type IDENTIFIERarguments : arguments COMMA type_name\n                | type_name\n                | emptyarguments_call : arguments_call COMMA expression\n                      | expression\n                      | fqn\n                      | emptycall : fqn LPAREN arguments_call RPARENdouble_expression : DOUBLE_LITERALstring_expression : STRING_LITERALbool_expression : TRUE\n                       | FALSEtype : INT\n            | DOUBLE\n            | STRING\n            | BOOL\n            | VOIDempty :'
    
_lr_action_items = {'PUBLIC':([0,2,3,4,11,12,13,15,16,17,18,26,31,33,56,59,60,72,],[-61,6,-3,-2,-61,6,-8,-4,-5,-6,-7,-22,-9,-23,-10,-24,-11,-39,]),'PRIVATE':([0,2,3,4,11,12,13,15,16,17,18,26,31,33,56,59,60,72,],[-61,7,-3,-2,-61,7,-8,-4,-5,-6,-7,-22,-9,-23,-10,-24,-11,-39,]),'CLASS':([0,2,3,4,5,6,7,8,15,],[-61,-61,-3,-2,9,-12,-13,-14,-4,]),'$end':([0,1,2,3,4,15,],[-61,0,-1,-3,-2,-4,]),'INT':([6,7,8,11,12,13,14,16,17,18,19,26,30,31,33,55,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-12,-13,-14,-61,-61,-8,21,-5,-6,-7,21,-22,21,-9,-23,21,-10,-24,-11,-61,21,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,21,21,-61,-37,-38,-36,-33,21,-35,-34,]),'DOUBLE':([6,7,8,11,12,13,14,16,17,18,19,26,30,31,33,55,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-12,-13,-14,-61,-61,-8,22,-5,-6,-7,22,-22,22,-9,-23,22,-10,-24,-11,-61,22,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,22,22,-61,-37,-38,-36,-33,22,-35,-34,]),'STRING':([6,7,8,11,12,13,14,16,17,18,19,26,30,31,33,55,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-12,-13,-14,-61,-61,-8,23,-5,-6,-7,23,-22,23,-9,-23,23,-10,-24,-11,-61,23,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,23,23,-61,-37,-38,-36,-33,23,-35,-34,]),'BOOL':([6,7,8,11,12,13,14,16,17,18,19,26,30,31,33,55,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-12,-13,-14,-61,-61,-8,24,-5,-6,-7,24,-22,24,-9,-23,24,-10,-24,-11,-61,24,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,24,24,-61,-37,-38,-36,-33,24,-35,-34,]),'VOID':([6,7,8,11,12,13,14,16,17,18,19,26,30,31,33,55,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-12,-13,-14,-61,-61,-8,25,-5,-6,-7,25,-22,25,-9,-23,25,-10,-24,-11,-61,25,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,25,25,-61,-37,-38,-36,-33,25,-35,-34,]),'IDENTIFIER':([9,20,21,22,23,24,25,26,27,32,33,34,35,57,58,59,61,68,69,71,72,73,74,75,76,77,80,81,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,],[10,28,-56,-57,-58,-59,-60,-22,29,39,-23,39,53,39,67,-24,-61,39,-16,39,-39,-15,-17,-18,-19,-20,-31,-32,-21,39,39,39,-25,39,39,-61,-37,-38,-36,-33,39,-35,-34,]),'LBRACKET':([10,54,93,94,100,],[11,61,61,61,61,]),'RBRACKET':([11,12,13,16,17,18,26,31,33,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,95,96,97,98,99,101,102,],[-61,15,-8,-5,-6,-7,-22,-9,-23,-10,-24,-11,-61,72,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,-61,-37,-38,-36,-33,-35,-34,]),'CONST':([11,12,13,16,17,18,26,31,33,56,59,60,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-61,19,-8,-5,-6,-7,-22,-9,-23,-10,-24,-11,-61,19,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,19,19,-61,-37,-38,-36,-33,19,-35,-34,]),'IF':([26,33,59,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-22,-23,-24,-61,82,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,82,82,-61,-37,-38,-36,-33,82,-35,-34,]),'WHILE':([26,33,59,61,68,69,72,73,74,75,76,77,80,81,85,92,93,94,95,96,97,98,99,100,101,102,],[-22,-23,-24,-61,83,-16,-39,-15,-17,-18,-19,-20,-31,-32,-21,-25,83,83,-61,-37,-38,-36,-33,83,-35,-34,]),'ELSE':([26,33,59,72,74,75,76,77,80,81,85,92,95,96,97,98,99,101,102,],[-22,-23,-24,-39,-17,-18,-19,-20,-31,-32,-21,-25,100,-37,-38,-36,-33,-35,-34,]),'LPAREN':([28,39,51,63,67,79,82,83,],[30,-41,57,57,-42,57,87,88,]),'SEMICOLON':([28,29,40,41,42,43,44,45,46,47,48,49,50,52,70,78,89,],[31,33,56,-26,-27,-28,-29,-30,-40,-52,-53,-54,-55,59,-51,85,92,]),'ASSIGNMENT':([28,29,39,67,79,],[32,34,-41,-42,86,]),'RPAREN':([30,36,37,38,39,41,42,43,44,45,46,47,48,49,50,53,57,62,63,64,65,66,67,70,84,90,91,],[-61,54,-45,-46,-41,-26,-27,-28,-29,-30,-40,-52,-53,-54,-55,-43,-61,-44,-49,70,-48,-50,-42,-51,-47,93,94,]),'COMMA':([30,36,37,38,39,41,42,43,44,45,46,47,48,49,50,53,57,62,63,64,65,66,67,70,84,],[-61,55,-45,-46,-41,-26,-27,-28,-29,-30,-40,-52,-53,-54,-55,-43,-61,-44,-49,71,-48,-50,-42,-51,-47,]),'INTEGER_LITERAL':([32,34,57,71,86,87,88,],[46,46,46,46,46,46,46,]),'DOUBLE_LITERAL':([32,34,57,71,86,87,88,],[47,47,47,47,47,47,47,]),'STRING_LITERAL':([32,34,57,71,86,87,88,],[48,48,48,48,48,48,48,]),'TRUE':([32,34,57,71,86,87,88,],[49,49,49,49,49,49,49,]),'FALSE':([32,34,57,71,86,87,88,],[50,50,50,50,50,50,50,]),'DOT':([39,51,63,67,79,],[-41,58,58,-42,58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'class_list':([0,],[2,]),'empty':([0,2,11,12,30,57,61,95,],[3,8,13,8,38,66,69,101,]),'class':([2,],[4,]),'access':([2,12,],[5,14,]),'class_body':([11,],[12,]),'method':([12,],[16,]),'class_variable':([12,],[17,]),'constant':([12,68,93,94,100,],[18,76,76,76,76,]),'type':([14,19,30,55,68,93,94,100,],[20,27,35,35,27,27,27,27,]),'var_declaration':([19,68,93,94,100,],[26,74,74,74,74,]),'arguments':([30,],[36,]),'type_name':([30,55,],[37,62,]),'expression':([32,34,57,71,86,87,88,],[40,52,65,84,89,90,91,]),'int_expression':([32,34,57,71,86,87,88,],[41,41,41,41,41,41,41,]),'double_expression':([32,34,57,71,86,87,88,],[42,42,42,42,42,42,42,]),'string_expression':([32,34,57,71,86,87,88,],[43,43,43,43,43,43,43,]),'bool_expression':([32,34,57,71,86,87,88,],[44,44,44,44,44,44,44,]),'call':([32,34,57,68,71,86,87,88,93,94,100,],[45,45,45,78,45,45,45,45,78,78,78,]),'fqn':([32,34,57,68,71,86,87,88,93,94,100,],[51,51,63,79,51,51,51,51,79,79,79,]),'block':([54,93,94,100,],[60,97,97,97,]),'arguments_call':([57,],[64,]),'statement_list':([61,],[68,]),'statement':([68,93,94,100,],[73,96,96,96,]),'asignment':([68,93,94,100,],[75,75,75,75,]),'block_statement':([68,93,94,100,],[77,77,77,77,]),'if':([68,93,94,100,],[80,80,80,80,]),'while':([68,93,94,100,],[81,81,81,81,]),'block_or_statement':([93,94,100,],[95,98,102,]),'else':([95,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> class_list','start',1,'p_start','syntax.py',11),
  ('class_list -> class_list class','class_list',2,'p_class_list','syntax.py',15),
  ('class_list -> empty','class_list',1,'p_class_list','syntax.py',16),
  ('class -> access CLASS IDENTIFIER LBRACKET class_body RBRACKET','class',6,'p_class','syntax.py',23),
  ('class_body -> class_body method','class_body',2,'p_class_body','syntax.py',27),
  ('class_body -> class_body class_variable','class_body',2,'p_class_body','syntax.py',28),
  ('class_body -> class_body constant','class_body',2,'p_class_body','syntax.py',29),
  ('class_body -> empty','class_body',1,'p_class_body','syntax.py',30),
  ('class_variable -> access type IDENTIFIER SEMICOLON','class_variable',4,'p_class_variable','syntax.py',45),
  ('class_variable -> access type IDENTIFIER ASSIGNMENT expression SEMICOLON','class_variable',6,'p_class_variable','syntax.py',46),
  ('method -> access type IDENTIFIER LPAREN arguments RPAREN block','method',7,'p_method','syntax.py',54),
  ('access -> PUBLIC','access',1,'p_access','syntax.py',58),
  ('access -> PRIVATE','access',1,'p_access','syntax.py',59),
  ('access -> empty','access',1,'p_access','syntax.py',60),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntax.py',67),
  ('statement_list -> empty','statement_list',1,'p_statement_list','syntax.py',68),
  ('statement -> var_declaration','statement',1,'p_statement','syntax.py',75),
  ('statement -> asignment','statement',1,'p_statement','syntax.py',76),
  ('statement -> constant','statement',1,'p_statement','syntax.py',77),
  ('statement -> block_statement','statement',1,'p_statement','syntax.py',78),
  ('statement -> call SEMICOLON','statement',2,'p_statement','syntax.py',79),
  ('constant -> CONST var_declaration','constant',2,'p_constant','syntax.py',83),
  ('var_declaration -> type IDENTIFIER SEMICOLON','var_declaration',3,'p_var_declaration','syntax.py',87),
  ('var_declaration -> type IDENTIFIER ASSIGNMENT expression SEMICOLON','var_declaration',5,'p_var_declaration','syntax.py',88),
  ('asignment -> fqn ASSIGNMENT expression SEMICOLON','asignment',4,'p_asignment','syntax.py',95),
  ('expression -> int_expression','expression',1,'p_expression','syntax.py',99),
  ('expression -> double_expression','expression',1,'p_expression','syntax.py',100),
  ('expression -> string_expression','expression',1,'p_expression','syntax.py',101),
  ('expression -> bool_expression','expression',1,'p_expression','syntax.py',102),
  ('expression -> call','expression',1,'p_expression','syntax.py',103),
  ('block_statement -> if','block_statement',1,'p_block_statement','syntax.py',107),
  ('block_statement -> while','block_statement',1,'p_block_statement','syntax.py',108),
  ('if -> IF LPAREN expression RPAREN block_or_statement else','if',6,'p_if','syntax.py',112),
  ('else -> ELSE block_or_statement','else',2,'p_else','syntax.py',116),
  ('else -> empty','else',1,'p_else','syntax.py',117),
  ('while -> WHILE LPAREN expression RPAREN block_or_statement','while',5,'p_while','syntax.py',124),
  ('block_or_statement -> statement','block_or_statement',1,'p_block_or_statement','syntax.py',128),
  ('block_or_statement -> block','block_or_statement',1,'p_block_or_statement','syntax.py',129),
  ('block -> LBRACKET statement_list RBRACKET','block',3,'p_block','syntax.py',133),
  ('int_expression -> INTEGER_LITERAL','int_expression',1,'p_int_expression','syntax.py',137),
  ('fqn -> IDENTIFIER','fqn',1,'p_fqn','syntax.py',141),
  ('fqn -> fqn DOT IDENTIFIER','fqn',3,'p_fqn','syntax.py',142),
  ('type_name -> type IDENTIFIER','type_name',2,'p_type_name','syntax.py',149),
  ('arguments -> arguments COMMA type_name','arguments',3,'p_arguments','syntax.py',153),
  ('arguments -> type_name','arguments',1,'p_arguments','syntax.py',154),
  ('arguments -> empty','arguments',1,'p_arguments','syntax.py',155),
  ('arguments_call -> arguments_call COMMA expression','arguments_call',3,'p_arguments_call','syntax.py',164),
  ('arguments_call -> expression','arguments_call',1,'p_arguments_call','syntax.py',165),
  ('arguments_call -> fqn','arguments_call',1,'p_arguments_call','syntax.py',166),
  ('arguments_call -> empty','arguments_call',1,'p_arguments_call','syntax.py',167),
  ('call -> fqn LPAREN arguments_call RPAREN','call',4,'p_call','syntax.py',176),
  ('double_expression -> DOUBLE_LITERAL','double_expression',1,'p_double_expression','syntax.py',180),
  ('string_expression -> STRING_LITERAL','string_expression',1,'p_string_expression','syntax.py',184),
  ('bool_expression -> TRUE','bool_expression',1,'p_bool_expression','syntax.py',188),
  ('bool_expression -> FALSE','bool_expression',1,'p_bool_expression','syntax.py',189),
  ('type -> INT','type',1,'p_type','syntax.py',193),
  ('type -> DOUBLE','type',1,'p_type','syntax.py',194),
  ('type -> STRING','type',1,'p_type','syntax.py',195),
  ('type -> BOOL','type',1,'p_type','syntax.py',196),
  ('type -> VOID','type',1,'p_type','syntax.py',197),
  ('empty -> <empty>','empty',0,'p_empty','syntax.py',201),
]
